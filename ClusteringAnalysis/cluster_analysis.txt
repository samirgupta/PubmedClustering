Analyzing the cluster generated for the Gold Set

Relevant Files:

(a) Cluster Labels:  ClusteringAnalysis/cluster_labels/gold_set_abstract_labels.txt   ## generated by test.py
(b) Metrics: ClusteringAnalysis/cluster_labels/gold_set_abstract_metrics.txt ##generated by test.py
(c) TSNE visualization: ClusteringAnalysis/tsne_figures/gold_abstract_opt.png ##generated by visualize.py
(d) Cluster PMIDs with top features for each PMID: ClusteringAnalysis/cluster_labels_with_top_features/gold_set_abstracts.txt ##generated by analyzeClusters.py


Comments:

1. Quantitative Analysis:

    The following clustering metrics were calculated, which provides an insight about the quality of the clusters.
    
    Homogeneity:  0.729
    Completeness:  0.690
    V-measure:  0.709
    Adjusted Rand-Index: 0.654

    
    
[Refer file (d) for comment below:

2. PMIDs [21549079, 26952712] with label "Noonan" predicted to be in Cluster#2, 
   which seems to be the cluster for "neurofibromatosis".
   This is due to the fact that these pmids also contains mentions of "neurofibromatosis" and 
   thus can also belong to a ""neurofibromatosis" cluster. 

3. Cluster #3 (TNBC) seems very good and contains only pmids with "TNBC" label, except PMID: 10025425, which
   has a label of "alzheimerâ€™s". 

4. There seems to recurrent issue with pmids with label: alzheimer's. These pmids appear in Cluster#3 (representative of TNBC)
   and Cluster#1 (seems to be representative of "Bardet-Biedl"). This might be due to the fact that there are very few pmids with
   alzheimer's label and the tf-idf features might not be discriminative enough to club them in a cluster of its own.

5. Cluster#0 and Cluster#1 both contain pmids with label "Bardet-Biedl". This is partly due to (4), because "alzheheimer" labeled pmids don't 
   have a cluster of its own and since num_of_clusters=#true_labels=5 and thus cause pmids of "Bardet-Biedl" to be assigned to remaining two
   clusters. Also in some cases "Bardet-Biedl" is mentioned as "Bardet Biedl" (without the -). The custom tokenizer in textProcessing.py removes
   "-" (considers it as punctuation) and thus treats it as a single token ("BardetBiedl") as opposed to pmids with " Bardet Biedl" mentions,
   the features are "Bardet", "Biedl"[unigram] and "Bardet Biedl" [bigram]. Thus due to this difference in mention ("Bardet-Biedl" vs "Bardet-Biedl")
   pmids that need to be clustered together have different features and thus have different representation in the Euclidean space.

   Possible Solution: Use a NER tool to identify and normalize mentions and map it to the same concept (MESHID or DOID for diseases) and use this
   normalized id as tokens for feature extraction instead of exact mentions. We could use PubTator to extract IDs for gene, disease, chemical mentions
   and replace these mentions with the IDs and thus handle the variation in mentions of the same gene/disease/chemicals.

6. Looking at the TSNE figure [refer file (c)]  for the gold set based on tf-idf feature extraction, it seems tf-idf might not be 
   good representation for an abstract text. There is no clear seperation of clusters.
   
    Other possible representation:
    (a) Only use entities (gene, disease, chemical, etc) in the text for feature extraction. We will pubtator and extract all entity mentions
        in the abstract and use the mentions as the text of the abstract for feature extraction. This will allow for more entity related features
        and remove noisy unigrams/bigrams feature which are not entities and not helpful. But this will cause the clustering to be very task-dependent
        i.e. useful if clusters are based on a task fo querying genes, diseases or chemicals.

    (b) use gensim to train doc2vec embeddings (https://radimrehurek.com/gensim/models/doc2vec.html) on entire MEDLINE 
       (or some large subset) and use this embeddings for feature extraction for pmids




